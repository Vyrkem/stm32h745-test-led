
TestCPP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002848  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af0  08002af0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002af0  08002af0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af0  08002af0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08002af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  24000010  08002b08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000090  08002b08  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef66  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9c  00000000  00000000  0002efa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00030d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038dec  00000000  00000000  000325b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e93c  00000000  00000000  0006b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b583  00000000  00000000  00079ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f5263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  001f52b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002ac8 	.word	0x08002ac8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002ac8 	.word	0x08002ac8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_GPIO_Init+0xc8>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0xc8>)
 800042c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_GPIO_Init+0xc8>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	4a23      	ldr	r2, [pc, #140]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000440:	f043 0302 	orr.w	r3, r3, #2
 8000444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <MX_GPIO_Init+0xc8>)
 800044a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <MX_GPIO_Init+0xc8>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f244 0101 	movw	r1, #16385	; 0x4001
 800047a:	4815      	ldr	r0, [pc, #84]	; (80004d0 <MX_GPIO_Init+0xcc>)
 800047c:	f000 fdea 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2102      	movs	r1, #2
 8000484:	4813      	ldr	r0, [pc, #76]	; (80004d4 <MX_GPIO_Init+0xd0>)
 8000486:	f000 fde5 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800048a:	f244 0301 	movw	r3, #16385	; 0x4001
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	2301      	movs	r3, #1
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000498:	2301      	movs	r3, #1
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <MX_GPIO_Init+0xcc>)
 80004a4:	f000 fc26 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a8:	2302      	movs	r3, #2
 80004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004b4:	2301      	movs	r3, #1
 80004b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4619      	mov	r1, r3
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_GPIO_Init+0xd0>)
 80004c0:	f000 fc18 	bl	8000cf4 <HAL_GPIO_Init>

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	58024400 	.word	0x58024400
 80004d0:	58020400 	.word	0x58020400
 80004d4:	58021000 	.word	0x58021000

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <main+0xf0>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d11b      	bne.n	8000522 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004ea:	f3bf 8f4f 	dsb	sy
}
 80004ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f0:	f3bf 8f6f 	isb	sy
}
 80004f4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004f6:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <main+0xf0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004fe:	f3bf 8f4f 	dsb	sy
}
 8000502:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000504:	f3bf 8f6f 	isb	sy
}
 8000508:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <main+0xf0>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a2e      	ldr	r2, [pc, #184]	; (80005c8 <main+0xf0>)
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000516:	f3bf 8f4f 	dsb	sy
}
 800051a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051c:	f3bf 8f6f 	isb	sy
}
 8000520:	e000      	b.n	8000524 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000522:	bf00      	nop
  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800052a:	bf00      	nop
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <main+0xf4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d004      	beq.n	8000542 <main+0x6a>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	1e5a      	subs	r2, r3, #1
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	dcf4      	bgt.n	800052c <main+0x54>
  if ( timeout < 0 )
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	da01      	bge.n	800054c <main+0x74>
  {
  Error_Handler();
 8000548:	f000 f8c2 	bl	80006d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa24 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f844 	bl	80005dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <main+0xf4>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <main+0xf4>)
 800055c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <main+0xf4>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fda2 	bl	80010bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fdb8 	bl	80010f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000584:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000586:	bf00      	nop
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0xf4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d104      	bne.n	800059e <main+0xc6>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	dcf4      	bgt.n	8000588 <main+0xb0>
if ( timeout < 0 )
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da01      	bge.n	80005a8 <main+0xd0>
{
Error_Handler();
 80005a4:	f000 f894 	bl	80006d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ff2c 	bl	8000404 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005ac:	f000 f8e4 	bl	8000778 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TimCntMs = 0;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <main+0xf8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]

  TimInterval = 1000;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <main+0xfc>)
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	601a      	str	r2, [r3, #0]


  //starter timer2 en mode Interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x100>)
 80005c0:	f001 fdba 	bl	8002138 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0xec>
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00
 80005cc:	58024400 	.word	0x58024400
 80005d0:	2400002c 	.word	0x2400002c
 80005d4:	24000030 	.word	0x24000030
 80005d8:	2400003c 	.word	0x2400003c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09c      	sub	sp, #112	; 0x70
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e6:	224c      	movs	r2, #76	; 0x4c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fa64 	bl	8002ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa5e 	bl	8002ab8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005fc:	2004      	movs	r0, #4
 80005fe:	f000 fd8b 	bl	8001118 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <SystemClock_Config+0xec>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <SystemClock_Config+0xec>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <SystemClock_Config+0xec>)
 8000614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <SystemClock_Config+0xf0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <SystemClock_Config+0xf0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xf0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000634:	bf00      	nop
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xf0>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800063e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000642:	d1f8      	bne.n	8000636 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	2302      	movs	r3, #2
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000656:	2305      	movs	r3, #5
 8000658:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800065a:	23a0      	movs	r3, #160	; 0xa0
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800066a:	2308      	movs	r3, #8
 800066c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800066e:	2300      	movs	r3, #0
 8000670:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fda6 	bl	80011cc <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000686:	f000 f823 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	233f      	movs	r3, #63	; 0x3f
 800068c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000696:	2308      	movs	r3, #8
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800069a:	2340      	movs	r3, #64	; 0x40
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f9b9 	bl	8001a28 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006bc:	f000 f808 	bl	80006d0 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3770      	adds	r7, #112	; 0x70
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	58000400 	.word	0x58000400
 80006cc:	58024800 	.word	0x58024800

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_MspInit+0x30>)
 80006e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006e8:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x30>)
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x30>)
 80006f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	58024400 	.word	0x58024400

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f98e 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <TIM2_IRQHandler+0x10>)
 800076a:	f001 fd5d 	bl	8002228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2400003c 	.word	0x2400003c

08000778 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_TIM2_Init+0x94>)
 8000798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_TIM2_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000000-1;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM2_Init+0x94>)
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_TIM2_Init+0x98>)
 80007ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_TIM2_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_TIM2_Init+0x94>)
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM2_Init+0x94>)
 80007be:	f001 fc63 	bl	8002088 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007c8:	f7ff ff82 	bl	80006d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_TIM2_Init+0x94>)
 80007da:	f001 fe45 	bl	8002468 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007e4:	f7ff ff74 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_TIM2_Init+0x94>)
 80007f6:	f002 f88f 	bl	8002918 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000800:	f7ff ff66 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2400003c 	.word	0x2400003c
 8000810:	01312cff 	.word	0x01312cff

08000814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000824:	d116      	bne.n	8000854 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_TIM_Base_MspInit+0x48>)
 8000828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <HAL_TIM_Base_MspInit+0x48>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x48>)
 8000838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	201c      	movs	r0, #28
 800084a:	f000 fa1e 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800084e:	201c      	movs	r0, #28
 8000850:	f000 fa35 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58024400 	.word	0x58024400

08000860 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d109      	bne.n	8000884 <HAL_TIM_PeriodElapsedCallback+0x24>
		TimCntMs ++;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000878:	6013      	str	r3, [r2, #0]
		CounterMs(TimInterval);
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f80a 	bl	8000898 <CounterMs>
	}
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2400003c 	.word	0x2400003c
 8000890:	24000034 	.word	0x24000034
 8000894:	24000038 	.word	0x24000038

08000898 <CounterMs>:


void CounterMs(uint32_t time){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	static char ledCnt = 0;

	if(TimCntMs<(time/10)){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a23      	ldr	r2, [pc, #140]	; (8000930 <CounterMs+0x98>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	4a22      	ldr	r2, [pc, #136]	; (8000934 <CounterMs+0x9c>)
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d83a      	bhi.n	8000928 <CounterMs+0x90>
		return;
	}
	else{
		TimCntMs = 0;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <CounterMs+0x9c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
		switch (ledCnt){
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <CounterMs+0xa0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d026      	beq.n	800090e <CounterMs+0x76>
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	dc32      	bgt.n	800092a <CounterMs+0x92>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <CounterMs+0x36>
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d011      	beq.n	80008f0 <CounterMs+0x58>
 80008cc:	e02d      	b.n	800092a <CounterMs+0x92>
		case 0:
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,  GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <CounterMs+0xa4>)
 80008d6:	f000 fbbd 	bl	8001054 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008da:	2101      	movs	r1, #1
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <CounterMs+0xa4>)
 80008de:	f000 fbd2 	bl	8001086 <HAL_GPIO_TogglePin>
			ledCnt++;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <CounterMs+0xa0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <CounterMs+0xa0>)
 80008ec:	701a      	strb	r2, [r3, #0]
			break;
 80008ee:	e01c      	b.n	800092a <CounterMs+0x92>

		case 1:
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <CounterMs+0xa4>)
 80008f4:	f000 fbc7 	bl	8001086 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008f8:	2102      	movs	r1, #2
 80008fa:	4811      	ldr	r0, [pc, #68]	; (8000940 <CounterMs+0xa8>)
 80008fc:	f000 fbc3 	bl	8001086 <HAL_GPIO_TogglePin>
			ledCnt++;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <CounterMs+0xa0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <CounterMs+0xa0>)
 800090a:	701a      	strb	r2, [r3, #0]
			break;
 800090c:	e00d      	b.n	800092a <CounterMs+0x92>

		case 2:
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800090e:	2102      	movs	r1, #2
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <CounterMs+0xa8>)
 8000912:	f000 fbb8 	bl	8001086 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <CounterMs+0xa4>)
 800091c:	f000 fbb3 	bl	8001086 <HAL_GPIO_TogglePin>
			ledCnt=0;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <CounterMs+0xa0>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
			break;
 8000926:	e000      	b.n	800092a <CounterMs+0x92>
		return;
 8000928:	bf00      	nop

		}

	}
}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	cccccccd 	.word	0xcccccccd
 8000934:	24000034 	.word	0x24000034
 8000938:	24000088 	.word	0x24000088
 800093c:	58020400 	.word	0x58020400
 8000940:	58021000 	.word	0x58021000

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000948:	f7ff fcc6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 f87d 	bl	8002a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdaf 	bl	80004d8 <main>
  bx  lr
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000980:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000984:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000988:	08002af8 	.word	0x08002af8
  ldr r2, =_sbss
 800098c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000990:	24000090 	.word	0x24000090

08000994 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC3_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 f968 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009a4:	f001 f9f6 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 80009a8:	4602      	mov	r2, r0
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_Init+0x68>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	f003 030f 	and.w	r3, r3, #15
 80009b4:	4913      	ldr	r1, [pc, #76]	; (8000a04 <HAL_Init+0x6c>)
 80009b6:	5ccb      	ldrb	r3, [r1, r3]
 80009b8:	f003 031f 	and.w	r3, r3, #31
 80009bc:	fa22 f303 	lsr.w	r3, r2, r3
 80009c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_Init+0x68>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_Init+0x6c>)
 80009cc:	5cd3      	ldrb	r3, [r2, r3]
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	fa22 f303 	lsr.w	r3, r2, r3
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_Init+0x70>)
 80009da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_Init+0x74>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e2:	200f      	movs	r0, #15
 80009e4:	f000 f814 	bl	8000a10 <HAL_InitTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e002      	b.n	80009f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009f2:	f7ff fe73 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	58024400 	.word	0x58024400
 8000a04:	08002ae0 	.word	0x08002ae0
 8000a08:	24000004 	.word	0x24000004
 8000a0c:	24000000 	.word	0x24000000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e021      	b.n	8000a68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_InitTick+0x64>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_InitTick+0x60>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f94d 	bl	8000cda <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f917 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x68>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2400000c 	.word	0x2400000c
 8000a74:	24000000 	.word	0x24000000
 8000a78:	24000008 	.word	0x24000008

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	2400000c 	.word	0x2400000c
 8000aa0:	2400008c 	.word	0x2400008c

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	2400008c 	.word	0x2400008c

08000abc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetREVID+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	0c1b      	lsrs	r3, r3, #16
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	5c001000 	.word	0x5c001000

08000ad4 <__NVIC_SetPriorityGrouping>:
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <__NVIC_SetPriorityGrouping+0x40>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x40>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00
 8000b18:	05fa0000 	.word	0x05fa0000

08000b1c <__NVIC_GetPriorityGrouping>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff29 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff40 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff33 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa4 	bl	8000c30 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d02:	4b89      	ldr	r3, [pc, #548]	; (8000f28 <HAL_GPIO_Init+0x234>)
 8000d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d06:	e194      	b.n	8001032 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 8186 	beq.w	800102c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d005      	beq.n	8000d38 <HAL_GPIO_Init+0x44>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d130      	bne.n	8000d9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	f003 0201 	and.w	r2, r3, #1
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d017      	beq.n	8000dd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d123      	bne.n	8000e2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	69b9      	ldr	r1, [r7, #24]
 8000e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0203 	and.w	r2, r3, #3
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 80e0 	beq.w	800102c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_GPIO_Init+0x238>)
 8000e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <HAL_GPIO_Init+0x238>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_GPIO_Init+0x238>)
 8000e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <HAL_GPIO_Init+0x23c>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_GPIO_Init+0x240>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d052      	beq.n	8000f5c <HAL_GPIO_Init+0x268>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_GPIO_Init+0x244>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d031      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_GPIO_Init+0x248>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d02b      	beq.n	8000f1e <HAL_GPIO_Init+0x22a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_GPIO_Init+0x24c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d025      	beq.n	8000f1a <HAL_GPIO_Init+0x226>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_GPIO_Init+0x250>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01f      	beq.n	8000f16 <HAL_GPIO_Init+0x222>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_GPIO_Init+0x254>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x21e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_GPIO_Init+0x258>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x21a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_GPIO_Init+0x25c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x216>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <HAL_GPIO_Init+0x260>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x212>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x264>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x20e>
 8000efe:	2309      	movs	r3, #9
 8000f00:	e02d      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f02:	230a      	movs	r3, #10
 8000f04:	e02b      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f06:	2308      	movs	r3, #8
 8000f08:	e029      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e027      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e025      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e023      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e021      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e01f      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e01d      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e01b      	b.n	8000f5e <HAL_GPIO_Init+0x26a>
 8000f26:	bf00      	nop
 8000f28:	58000080 	.word	0x58000080
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58000400 	.word	0x58000400
 8000f34:	58020000 	.word	0x58020000
 8000f38:	58020400 	.word	0x58020400
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58020c00 	.word	0x58020c00
 8000f44:	58021000 	.word	0x58021000
 8000f48:	58021400 	.word	0x58021400
 8000f4c:	58021800 	.word	0x58021800
 8000f50:	58021c00 	.word	0x58021c00
 8000f54:	58022000 	.word	0x58022000
 8000f58:	58022400 	.word	0x58022400
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6e:	4938      	ldr	r1, [pc, #224]	; (8001050 <HAL_GPIO_Init+0x35c>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	3301      	adds	r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	f47f ae63 	bne.w	8000d08 <HAL_GPIO_Init+0x14>
  }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	58000400 	.word	0x58000400

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4013      	ands	r3, r2
 800109e:	041a      	lsls	r2, r3, #16
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	400b      	ands	r3, r1
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_HSEM_FastTake+0x2c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3320      	adds	r3, #32
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_HSEM_FastTake+0x30>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e000      	b.n	80010da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	58026400 	.word	0x58026400
 80010ec:	80000300 	.word	0x80000300

080010f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80010fa:	4906      	ldr	r1, [pc, #24]	; (8001114 <HAL_HSEM_Release+0x24>)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	58026400 	.word	0x58026400

08001118 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	2b06      	cmp	r3, #6
 800112a:	d00a      	beq.n	8001142 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	429a      	cmp	r2, r3
 8001138:	d001      	beq.n	800113e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e040      	b.n	80011c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e03e      	b.n	80011c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800114a:	491f      	ldr	r1, [pc, #124]	; (80011c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4313      	orrs	r3, r2
 8001150:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001152:	f7ff fca7 	bl	8000aa4 <HAL_GetTick>
 8001156:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001158:	e009      	b.n	800116e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800115a:	f7ff fca3 	bl	8000aa4 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001168:	d901      	bls.n	800116e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e028      	b.n	80011c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800117a:	d1ee      	bne.n	800115a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b1e      	cmp	r3, #30
 8001180:	d008      	beq.n	8001194 <HAL_PWREx_ConfigSupply+0x7c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b2e      	cmp	r3, #46	; 0x2e
 8001186:	d005      	beq.n	8001194 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b1d      	cmp	r3, #29
 800118c:	d002      	beq.n	8001194 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b2d      	cmp	r3, #45	; 0x2d
 8001192:	d114      	bne.n	80011be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001194:	f7ff fc86 	bl	8000aa4 <HAL_GetTick>
 8001198:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800119a:	e009      	b.n	80011b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800119c:	f7ff fc82 	bl	8000aa4 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011aa:	d901      	bls.n	80011b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e007      	b.n	80011c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d1ee      	bne.n	800119c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	58024800 	.word	0x58024800

080011cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	f000 bc1d 	b.w	8001a1a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8087 	beq.w	80012fc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ee:	4b99      	ldr	r3, [pc, #612]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011f8:	4b96      	ldr	r3, [pc, #600]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	2b10      	cmp	r3, #16
 8001202:	d007      	beq.n	8001214 <HAL_RCC_OscConfig+0x48>
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	2b18      	cmp	r3, #24
 8001208:	d110      	bne.n	800122c <HAL_RCC_OscConfig+0x60>
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d06c      	beq.n	80012fa <HAL_RCC_OscConfig+0x12e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d168      	bne.n	80012fa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e3f6      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x78>
 8001236:	4b87      	ldr	r3, [pc, #540]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a86      	ldr	r2, [pc, #536]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e02e      	b.n	80012a2 <HAL_RCC_OscConfig+0xd6>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10c      	bne.n	8001266 <HAL_RCC_OscConfig+0x9a>
 800124c:	4b81      	ldr	r3, [pc, #516]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a80      	ldr	r2, [pc, #512]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b7e      	ldr	r3, [pc, #504]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a7d      	ldr	r2, [pc, #500]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e01d      	b.n	80012a2 <HAL_RCC_OscConfig+0xd6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0xbe>
 8001270:	4b78      	ldr	r3, [pc, #480]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a77      	ldr	r2, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b75      	ldr	r3, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a74      	ldr	r2, [pc, #464]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e00b      	b.n	80012a2 <HAL_RCC_OscConfig+0xd6>
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a71      	ldr	r2, [pc, #452]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6e      	ldr	r2, [pc, #440]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d013      	beq.n	80012d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fbfb 	bl	8000aa4 <HAL_GetTick>
 80012ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b2:	f7ff fbf7 	bl	8000aa4 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b64      	cmp	r3, #100	; 0x64
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e3aa      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012c4:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0xe6>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff fbe7 	bl	8000aa4 <HAL_GetTick>
 80012d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff fbe3 	bl	8000aa4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e396      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ec:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x10e>
 80012f8:	e000      	b.n	80012fc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80cb 	beq.w	80014a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001312:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_RCC_OscConfig+0x164>
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	2b18      	cmp	r3, #24
 8001324:	d156      	bne.n	80013d4 <HAL_RCC_OscConfig+0x208>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d151      	bne.n	80013d4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x17c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e368      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001348:	4b42      	ldr	r3, [pc, #264]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 0219 	bic.w	r2, r3, #25
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	493f      	ldr	r1, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800135a:	f7ff fba3 	bl	8000aa4 <HAL_GetTick>
 800135e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fb9f 	bl	8000aa4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e352      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001374:	4b37      	ldr	r3, [pc, #220]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	f7ff fb9c 	bl	8000abc <HAL_GetREVID>
 8001384:	4603      	mov	r3, r0
 8001386:	f241 0203 	movw	r2, #4099	; 0x1003
 800138a:	4293      	cmp	r3, r2
 800138c:	d817      	bhi.n	80013be <HAL_RCC_OscConfig+0x1f2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b40      	cmp	r3, #64	; 0x40
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1dc>
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800139e:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a6:	e07b      	b.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	031b      	lsls	r3, r3, #12
 80013b6:	4927      	ldr	r1, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	e070      	b.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	4921      	ldr	r1, [pc, #132]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d2:	e065      	b.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d048      	beq.n	800146e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 0219 	bic.w	r2, r3, #25
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	491a      	ldr	r1, [pc, #104]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb59 	bl	8000aa4 <HAL_GetTick>
 80013f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fb55 	bl	8000aa4 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e308      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	f7ff fb52 	bl	8000abc <HAL_GetREVID>
 8001418:	4603      	mov	r3, r0
 800141a:	f241 0203 	movw	r2, #4099	; 0x1003
 800141e:	4293      	cmp	r3, r2
 8001420:	d81a      	bhi.n	8001458 <HAL_RCC_OscConfig+0x28c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b40      	cmp	r3, #64	; 0x40
 8001428:	d108      	bne.n	800143c <HAL_RCC_OscConfig+0x270>
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	6053      	str	r3, [r2, #4]
 800143a:	e031      	b.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	031b      	lsls	r3, r3, #12
 800144a:	4902      	ldr	r1, [pc, #8]	; (8001454 <HAL_RCC_OscConfig+0x288>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
 8001450:	e026      	b.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
 8001452:	bf00      	nop
 8001454:	58024400 	.word	0x58024400
 8001458:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	4997      	ldr	r1, [pc, #604]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e018      	b.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a94      	ldr	r2, [pc, #592]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fb13 	bl	8000aa4 <HAL_GetTick>
 800147e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fb0f 	bl	8000aa4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e2c2      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001494:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a9 	beq.w	8001600 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ae:	4b85      	ldr	r3, [pc, #532]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014b8:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d007      	beq.n	80014d4 <HAL_RCC_OscConfig+0x308>
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b18      	cmp	r3, #24
 80014c8:	d13a      	bne.n	8001540 <HAL_RCC_OscConfig+0x374>
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d135      	bne.n	8001540 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014d4:	4b7b      	ldr	r3, [pc, #492]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x320>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b80      	cmp	r3, #128	; 0x80
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e296      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ec:	f7ff fae6 	bl	8000abc <HAL_GetREVID>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d817      	bhi.n	800152a <HAL_RCC_OscConfig+0x35e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d108      	bne.n	8001514 <HAL_RCC_OscConfig+0x348>
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800150a:	4a6e      	ldr	r2, [pc, #440]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800150c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001510:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001512:	e075      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001514:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	069b      	lsls	r3, r3, #26
 8001522:	4968      	ldr	r1, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001528:	e06a      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800152a:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	061b      	lsls	r3, r3, #24
 8001538:	4962      	ldr	r1, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800153a:	4313      	orrs	r3, r2
 800153c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800153e:	e05f      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d042      	beq.n	80015ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001548:	4b5e      	ldr	r3, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a5d      	ldr	r2, [pc, #372]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800154e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff faa6 	bl	8000aa4 <HAL_GetTick>
 8001558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800155c:	f7ff faa2 	bl	8000aa4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e255      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800157a:	f7ff fa9f 	bl	8000abc <HAL_GetREVID>
 800157e:	4603      	mov	r3, r0
 8001580:	f241 0203 	movw	r2, #4099	; 0x1003
 8001584:	4293      	cmp	r3, r2
 8001586:	d817      	bhi.n	80015b8 <HAL_RCC_OscConfig+0x3ec>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	2b20      	cmp	r3, #32
 800158e:	d108      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3d6>
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001598:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800159a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800159e:	6053      	str	r3, [r2, #4]
 80015a0:	e02e      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
 80015a2:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	069b      	lsls	r3, r3, #26
 80015b0:	4944      	ldr	r1, [pc, #272]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e023      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
 80015b8:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	493f      	ldr	r1, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fa63 	bl	8000aa4 <HAL_GetTick>
 80015de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015e2:	f7ff fa5f 	bl	8000aa4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e212      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d036      	beq.n	800167a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d019      	beq.n	8001648 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001618:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fa40 	bl	8000aa4 <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fa3c 	bl	8000aa4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1ef      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x45c>
 8001646:	e018      	b.n	800167a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fa26 	bl	8000aa4 <HAL_GetTick>
 8001658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fa22 	bl	8000aa4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1d5      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d039      	beq.n	80016fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001698:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800169a:	f7ff fa03 	bl	8000aa4 <HAL_GetTick>
 800169e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016a2:	f7ff f9ff 	bl	8000aa4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1b2      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4d6>
 80016c0:	e01b      	b.n	80016fa <HAL_RCC_OscConfig+0x52e>
 80016c2:	bf00      	nop
 80016c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016c8:	4b9b      	ldr	r3, [pc, #620]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a9a      	ldr	r2, [pc, #616]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80016ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016d4:	f7ff f9e6 	bl	8000aa4 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016dc:	f7ff f9e2 	bl	8000aa4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e195      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8081 	beq.w	800180a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001708:	4b8c      	ldr	r3, [pc, #560]	; (800193c <HAL_RCC_OscConfig+0x770>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a8b      	ldr	r2, [pc, #556]	; (800193c <HAL_RCC_OscConfig+0x770>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001714:	f7ff f9c6 	bl	8000aa4 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff f9c2 	bl	8000aa4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e175      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800172e:	4b83      	ldr	r3, [pc, #524]	; (800193c <HAL_RCC_OscConfig+0x770>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x584>
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a7c      	ldr	r2, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	e02d      	b.n	80017ac <HAL_RCC_OscConfig+0x5e0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x5a6>
 8001758:	4b77      	ldr	r3, [pc, #476]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a76      	ldr	r2, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a73      	ldr	r2, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x5e0>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x5c8>
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a6b      	ldr	r2, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x5e0>
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a67      	ldr	r2, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a64      	ldr	r2, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff f976 	bl	8000aa4 <HAL_GetTick>
 80017b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff f972 	bl	8000aa4 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e123      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d2:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ee      	beq.n	80017bc <HAL_RCC_OscConfig+0x5f0>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff f960 	bl	8000aa4 <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff f95c 	bl	8000aa4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e10d      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ee      	bne.n	80017e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8102 	beq.w	8001a18 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001814:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181c:	2b18      	cmp	r3, #24
 800181e:	f000 80bd 	beq.w	800199c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2b02      	cmp	r3, #2
 8001828:	f040 809e 	bne.w	8001968 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f934 	bl	8000aa4 <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f930 	bl	8000aa4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0e3      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_RCC_OscConfig+0x774>)
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	430a      	orrs	r2, r1
 8001872:	4931      	ldr	r1, [pc, #196]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001874:	4313      	orrs	r3, r2
 8001876:	628b      	str	r3, [r1, #40]	; 0x28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	3b01      	subs	r3, #1
 800187e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001886:	3b01      	subs	r3, #1
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	b29b      	uxth	r3, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001892:	3b01      	subs	r3, #1
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	3b01      	subs	r3, #1
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018a8:	4923      	ldr	r1, [pc, #140]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x778>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018c6:	00d2      	lsls	r2, r2, #3
 80018c8:	491b      	ldr	r1, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f023 020c 	bic.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4917      	ldr	r1, [pc, #92]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	f023 0202 	bic.w	r2, r3, #2
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	4912      	ldr	r1, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001914:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_RCC_OscConfig+0x76c>)
 8001928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff f8b9 	bl	8000aa4 <HAL_GetTick>
 8001932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001934:	e011      	b.n	800195a <HAL_RCC_OscConfig+0x78e>
 8001936:	bf00      	nop
 8001938:	58024400 	.word	0x58024400
 800193c:	58024800 	.word	0x58024800
 8001940:	fffffc0c 	.word	0xfffffc0c
 8001944:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f8ac 	bl	8000aa4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e05f      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x858>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x77c>
 8001966:	e057      	b.n	8001a18 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_RCC_OscConfig+0x858>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x858>)
 800196e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f896 	bl	8000aa4 <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f892 	bl	8000aa4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e045      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_RCC_OscConfig+0x858>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x7b0>
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x858>)
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_OscConfig+0x858>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d031      	beq.n	8001a14 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0203 	and.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d12a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d122      	bne.n	8001a14 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0a5b      	lsrs	r3, r3, #9
 80019e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d111      	bne.n	8001a14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0e1b      	lsrs	r3, r3, #24
 8001a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400

08001a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e19c      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b8a      	ldr	r3, [pc, #552]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d910      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b87      	ldr	r3, [pc, #540]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 020f 	bic.w	r2, r3, #15
 8001a52:	4985      	ldr	r1, [pc, #532]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e184      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d908      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a88:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	4975      	ldr	r1, [pc, #468]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	496a      	ldr	r1, [pc, #424]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	4b64      	ldr	r3, [pc, #400]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d908      	bls.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ae4:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	495e      	ldr	r1, [pc, #376]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d908      	bls.n	8001b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4953      	ldr	r1, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d908      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f023 020f 	bic.w	r2, r3, #15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4947      	ldr	r1, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d055      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4940      	ldr	r1, [pc, #256]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d121      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0f6      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d115      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0ea      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0de      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d6      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f023 0207 	bic.w	r2, r3, #7
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4925      	ldr	r1, [pc, #148]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7fe ff63 	bl	8000aa4 <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7fe ff5f 	bl	8000aa4 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0be      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d1eb      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d208      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f023 020f 	bic.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x244>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d214      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 020f 	bic.w	r2, r3, #15
 8001c4e:	4906      	ldr	r1, [pc, #24]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_RCC_ClockConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e086      	b.n	8001d76 <HAL_RCC_ClockConfig+0x34e>
 8001c68:	52002000 	.word	0x52002000
 8001c6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d208      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4939      	ldr	r1, [pc, #228]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d208      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	492e      	ldr	r1, [pc, #184]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d010      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d208      	bcs.n	8001cfa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4922      	ldr	r1, [pc, #136]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d208      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4917      	ldr	r1, [pc, #92]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d28:	f000 f834 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	4912      	ldr	r1, [pc, #72]	; (8001d84 <HAL_RCC_ClockConfig+0x35c>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_RCC_ClockConfig+0x358>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <HAL_RCC_ClockConfig+0x35c>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x360>)
 8001d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x364>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x368>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fe50 	bl	8000a10 <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	58024400 	.word	0x58024400
 8001d84:	08002ae0 	.word	0x08002ae0
 8001d88:	24000004 	.word	0x24000004
 8001d8c:	24000000 	.word	0x24000000
 8001d90:	24000008 	.word	0x24000008

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d9a:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da2:	2b18      	cmp	r3, #24
 8001da4:	f200 8155 	bhi.w	8002052 <HAL_RCC_GetSysClockFreq+0x2be>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001e15 	.word	0x08001e15
 8001db4:	08002053 	.word	0x08002053
 8001db8:	08002053 	.word	0x08002053
 8001dbc:	08002053 	.word	0x08002053
 8001dc0:	08002053 	.word	0x08002053
 8001dc4:	08002053 	.word	0x08002053
 8001dc8:	08002053 	.word	0x08002053
 8001dcc:	08002053 	.word	0x08002053
 8001dd0:	08001e3b 	.word	0x08001e3b
 8001dd4:	08002053 	.word	0x08002053
 8001dd8:	08002053 	.word	0x08002053
 8001ddc:	08002053 	.word	0x08002053
 8001de0:	08002053 	.word	0x08002053
 8001de4:	08002053 	.word	0x08002053
 8001de8:	08002053 	.word	0x08002053
 8001dec:	08002053 	.word	0x08002053
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08002053 	.word	0x08002053
 8001df8:	08002053 	.word	0x08002053
 8001dfc:	08002053 	.word	0x08002053
 8001e00:	08002053 	.word	0x08002053
 8001e04:	08002053 	.word	0x08002053
 8001e08:	08002053 	.word	0x08002053
 8001e0c:	08002053 	.word	0x08002053
 8001e10:	08001e47 	.word	0x08001e47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e14:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e20:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e32:	e111      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e34:	4b8d      	ldr	r3, [pc, #564]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e36:	61bb      	str	r3, [r7, #24]
    break;
 8001e38:	e10e      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e3c:	61bb      	str	r3, [r7, #24]
    break;
 8001e3e:	e10b      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e42:	61bb      	str	r3, [r7, #24]
    break;
 8001e44:	e108      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e50:	4b85      	ldr	r3, [pc, #532]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e5c:	4b82      	ldr	r3, [pc, #520]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e66:	4b80      	ldr	r3, [pc, #512]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80e1 	beq.w	800204c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	f000 8083 	beq.w	8001f98 <HAL_RCC_GetSysClockFreq+0x204>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	f200 80a1 	bhi.w	8001fdc <HAL_RCC_GetSysClockFreq+0x248>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d056      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ea6:	e099      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d02d      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f0e:	e087      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800207c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f22:	4b51      	ldr	r3, [pc, #324]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f52:	e065      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f96:	e043      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fda:	e021      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002002:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800201e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	0a5b      	lsrs	r3, r3, #9
 8002026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800202a:	3301      	adds	r3, #1
 800202c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002038:	edd7 6a07 	vldr	s13, [r7, #28]
 800203c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002054:	61bb      	str	r3, [r7, #24]
    break;
 8002056:	bf00      	nop
  }

  return sysclockfreq;
 8002058:	69bb      	ldr	r3, [r7, #24]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	58024400 	.word	0x58024400
 800206c:	03d09000 	.word	0x03d09000
 8002070:	003d0900 	.word	0x003d0900
 8002074:	017d7840 	.word	0x017d7840
 8002078:	46000000 	.word	0x46000000
 800207c:	4c742400 	.word	0x4c742400
 8002080:	4a742400 	.word	0x4a742400
 8002084:	4bbebc20 	.word	0x4bbebc20

08002088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e049      	b.n	800212e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fbb0 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 faee 	bl	80026a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d001      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e054      	b.n	80021fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_TIM_Base_Start_IT+0xd0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d022      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217a:	d01d      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_TIM_Base_Start_IT+0xd4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d018      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <HAL_TIM_Base_Start_IT+0xd8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_TIM_Base_Start_IT+0xdc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00e      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_TIM_Base_Start_IT+0xe0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_TIM_Base_Start_IT+0xe4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x80>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_TIM_Base_Start_IT+0xe8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d115      	bne.n	80021e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_TIM_Base_Start_IT+0xec>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d015      	beq.n	80021f6 <HAL_TIM_Base_Start_IT+0xbe>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d011      	beq.n	80021f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e2:	e008      	b.n	80021f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e000      	b.n	80021f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40001800 	.word	0x40001800
 8002220:	40014000 	.word	0x40014000
 8002224:	00010007 	.word	0x00010007

08002228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d122      	bne.n	8002284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d11b      	bne.n	8002284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0202 	mvn.w	r2, #2
 8002254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f9fe 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9f0 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa01 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b04      	cmp	r3, #4
 8002290:	d122      	bne.n	80022d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b04      	cmp	r3, #4
 800229e:	d11b      	bne.n	80022d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0204 	mvn.w	r2, #4
 80022a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9d4 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f9c6 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f9d7 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0208 	mvn.w	r2, #8
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2204      	movs	r2, #4
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9aa 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f99c 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9ad 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b10      	cmp	r3, #16
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b10      	cmp	r3, #16
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0210 	mvn.w	r2, #16
 8002350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2208      	movs	r2, #8
 8002356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f980 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f972 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f983 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10e      	bne.n	80023ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d107      	bne.n	80023ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0201 	mvn.w	r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fa5a 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	2b80      	cmp	r3, #128	; 0x80
 80023b8:	d10e      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fb38 	bl	8002a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e6:	d10e      	bne.n	8002406 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	2b80      	cmp	r3, #128	; 0x80
 80023f4:	d107      	bne.n	8002406 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fb2b 	bl	8002a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d10e      	bne.n	8002432 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d107      	bne.n	8002432 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800242a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f931 	bl	8002694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b20      	cmp	r3, #32
 800243e:	d10e      	bne.n	800245e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b20      	cmp	r3, #32
 800244c:	d107      	bne.n	800245e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f06f 0220 	mvn.w	r2, #32
 8002456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 faeb 	bl	8002a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_TIM_ConfigClockSource+0x1c>
 8002480:	2302      	movs	r3, #2
 8002482:	e0dc      	b.n	800263e <HAL_TIM_ConfigClockSource+0x1d6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_TIM_ConfigClockSource+0x1e0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a64      	ldr	r2, [pc, #400]	; (800264c <HAL_TIM_ConfigClockSource+0x1e4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f000 80a9 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 80024c0:	4a62      	ldr	r2, [pc, #392]	; (800264c <HAL_TIM_ConfigClockSource+0x1e4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f200 80ae 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 80024c8:	4a61      	ldr	r2, [pc, #388]	; (8002650 <HAL_TIM_ConfigClockSource+0x1e8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f000 80a1 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 80024d0:	4a5f      	ldr	r2, [pc, #380]	; (8002650 <HAL_TIM_ConfigClockSource+0x1e8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f200 80a6 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 80024d8:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <HAL_TIM_ConfigClockSource+0x1ec>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f000 8099 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 80024e0:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_TIM_ConfigClockSource+0x1ec>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f200 809e 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 80024e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80024ec:	f000 8091 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 80024f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80024f4:	f200 8096 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 80024f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fc:	f000 8089 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 8002500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002504:	f200 808e 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250c:	d03e      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x124>
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	f200 8087 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	f000 8086 	beq.w	800262a <HAL_TIM_ConfigClockSource+0x1c2>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	d87f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	d01a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0xf6>
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d87b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 800252c:	2b60      	cmp	r3, #96	; 0x60
 800252e:	d050      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x16a>
 8002530:	2b60      	cmp	r3, #96	; 0x60
 8002532:	d877      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 8002534:	2b50      	cmp	r3, #80	; 0x50
 8002536:	d03c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x14a>
 8002538:	2b50      	cmp	r3, #80	; 0x50
 800253a:	d873      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d058      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x18a>
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d86f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d064      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 8002548:	2b30      	cmp	r3, #48	; 0x30
 800254a:	d86b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d060      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d867      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1aa>
 800255c:	e062      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f000 f9b3 	bl	80028d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e04f      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f000 f99c 	bl	80028d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e03c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f90c 	bl	80027dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2150      	movs	r1, #80	; 0x50
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f966 	bl	800289c <TIM_ITRx_SetConfig>
      break;
 80025d0:	e02c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f92b 	bl	800283a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2160      	movs	r1, #96	; 0x60
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f956 	bl	800289c <TIM_ITRx_SetConfig>
      break;
 80025f0:	e01c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8ec 	bl	80027dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f946 	bl	800289c <TIM_ITRx_SetConfig>
      break;
 8002610:	e00c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 f93d 	bl	800289c <TIM_ITRx_SetConfig>
      break;
 8002622:	e003      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e000      	b.n	800262c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800262a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	ffceff88 	.word	0xffceff88
 800264c:	00100040 	.word	0x00100040
 8002650:	00100030 	.word	0x00100030
 8002654:	00100020 	.word	0x00100020

08002658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a40      	ldr	r2, [pc, #256]	; (80027bc <TIM_Base_SetConfig+0x114>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d00f      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <TIM_Base_SetConfig+0x118>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00b      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <TIM_Base_SetConfig+0x11c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d007      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <TIM_Base_SetConfig+0x120>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <TIM_Base_SetConfig+0x124>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d108      	bne.n	80026fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <TIM_Base_SetConfig+0x114>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d01b      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <TIM_Base_SetConfig+0x118>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d017      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <TIM_Base_SetConfig+0x11c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <TIM_Base_SetConfig+0x120>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00f      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <TIM_Base_SetConfig+0x124>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00b      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <TIM_Base_SetConfig+0x128>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <TIM_Base_SetConfig+0x12c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <TIM_Base_SetConfig+0x9a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <TIM_Base_SetConfig+0x130>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d108      	bne.n	8002754 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <TIM_Base_SetConfig+0x114>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00f      	beq.n	80027a0 <TIM_Base_SetConfig+0xf8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <TIM_Base_SetConfig+0x124>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00b      	beq.n	80027a0 <TIM_Base_SetConfig+0xf8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <TIM_Base_SetConfig+0x128>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <TIM_Base_SetConfig+0xf8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <TIM_Base_SetConfig+0x12c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_Base_SetConfig+0xf8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <TIM_Base_SetConfig+0x130>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d103      	bne.n	80027a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	615a      	str	r2, [r3, #20]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40010400 	.word	0x40010400
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800

080027dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 030a 	bic.w	r3, r3, #10
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800283a:	b480      	push	{r7}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f023 0210 	bic.w	r2, r3, #16
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	031b      	lsls	r3, r3, #12
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <TIM_ITRx_SetConfig+0x38>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f043 0307 	orr.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	609a      	str	r2, [r3, #8]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	ffcfff8f 	.word	0xffcfff8f

080028d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	021a      	lsls	r2, r3, #8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800292c:	2302      	movs	r3, #2
 800292e:	e06d      	b.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800296a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d01d      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10c      	bne.n	80029fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010400 	.word	0x40010400
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40001800 	.word	0x40001800
 8002a30:	40014000 	.word	0x40014000

08002a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <__libc_init_array>:
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	4d0d      	ldr	r5, [pc, #52]	; (8002aa8 <__libc_init_array+0x38>)
 8002a74:	4c0d      	ldr	r4, [pc, #52]	; (8002aac <__libc_init_array+0x3c>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	42a6      	cmp	r6, r4
 8002a7e:	d109      	bne.n	8002a94 <__libc_init_array+0x24>
 8002a80:	4d0b      	ldr	r5, [pc, #44]	; (8002ab0 <__libc_init_array+0x40>)
 8002a82:	4c0c      	ldr	r4, [pc, #48]	; (8002ab4 <__libc_init_array+0x44>)
 8002a84:	f000 f820 	bl	8002ac8 <_init>
 8002a88:	1b64      	subs	r4, r4, r5
 8002a8a:	10a4      	asrs	r4, r4, #2
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	42a6      	cmp	r6, r4
 8002a90:	d105      	bne.n	8002a9e <__libc_init_array+0x2e>
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a98:	4798      	blx	r3
 8002a9a:	3601      	adds	r6, #1
 8002a9c:	e7ee      	b.n	8002a7c <__libc_init_array+0xc>
 8002a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa2:	4798      	blx	r3
 8002aa4:	3601      	adds	r6, #1
 8002aa6:	e7f2      	b.n	8002a8e <__libc_init_array+0x1e>
 8002aa8:	08002af0 	.word	0x08002af0
 8002aac:	08002af0 	.word	0x08002af0
 8002ab0:	08002af0 	.word	0x08002af0
 8002ab4:	08002af4 	.word	0x08002af4

08002ab8 <memset>:
 8002ab8:	4402      	add	r2, r0
 8002aba:	4603      	mov	r3, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <_init>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr

08002ad4 <_fini>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr
